import Foundation

// MARK: - –°–µ—Ä–≤—ñ—Å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞–º–∏
final class ErrorService: ObservableObject {
    @Published var currentError: AppError?
    @Published var errorLog: [AppError] = []
    
    private let maxLogSize = 100
    
    static let shared = ErrorService()
    
    private init() {}
    
    // MARK: - –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç–æ–¥–∏
    func report(_ error: Error, context: String = "") {
        let appError: AppError
        
        if let authError = error as? AuthError {
            appError = .auth(description: "\(context) \(authError.localizedDescription)")
        } else {
            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–º–∏–ª–∫–∏
            switch error {
            case let urlError as URLError:
                appError = .network(description: "\(context) \(urlError.localizedDescription)")
            default:
                appError = .unknown(description: "\(context) \(error.localizedDescription)")
            }
        }
        
        DispatchQueue.main.async {
            self.currentError = appError
            self.errorLog.append(appError)
            
            // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –ª–æ–≥—É
            if self.errorLog.count > self.maxLogSize {
                self.errorLog.removeFirst()
            }
            
            // –õ–æ–≥—É—î–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
            print("üö® [ERROR] \(appError.localizedDescription)")
        }
    }
    
    func report(_ appError: AppError) {
        DispatchQueue.main.async {
            self.currentError = appError
            self.errorLog.append(appError)
            print("üö® [ERROR] \(appError.localizedDescription)")
        }
    }
    
    func clearCurrentError() {
        DispatchQueue.main.async {
            self.currentError = nil
        }
    }
    
    func clearAllErrors() {
        DispatchQueue.main.async {
            self.currentError = nil
            self.errorLog.removeAll()
        }
    }
    
    // MARK: - –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–µ—Ç–æ–¥–∏
    func reportNetworkError(_ description: String, context: String = "") {
        report(.network(description: "\(context) \(description)"))
    }
    
    func reportAuthError(_ description: String, context: String = "") {
        report(.auth(description: "\(context) \(description)"))
    }
    
    func reportMusicServiceError(_ error: Error, serviceType: MusicServiceType, context: String = "") {
        let appError = error.toAppError(context: context, serviceType: serviceType)
        report(appError)
    }
    
    func reportSpotifyError(_ description: String, context: String = "") {
        report(.musicService(service: .spotify, description: "\(context) \(description)"))
    }
    
    func reportYouTubeMusicError(_ description: String, context: String = "") {
        report(.musicService(service: .youtubeMusic, description: "\(context) \(description)"))
    }
    
    func reportAppleMusicError(_ description: String, context: String = "") {
        report(.musicService(service: .appleMusic, description: "\(context) \(description)"))
    }
    
    func reportDataError(_ description: String, context: String = "") {
        report(.data(description: "\(context) \(description)"))
    }
}

