import Foundation
import Combine

// –ë–∞–∑–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è –≤—Å—ñ—Ö –º—É–∑–∏—á–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
class BaseMusicServiceClient<
    Constants: MusicServiceConstants,
    AuthHandler: BaseWebAuthHandler<Constants>,
    TokenStorage: BaseTokenStorage<Constants>
>: ObservableObject, MusicServiceProtocol {
    
    internal let webAuthHandler: AuthHandler
    internal let tokenStorage: TokenStorage
    internal let errorService: ErrorService
    internal let serviceType: MusicServiceType
    
    @Published public var isConnected = false
    @Published public var errorMessage: String? = nil
    @Published public var isLoading = false
    
    init(
        webAuthHandler: AuthHandler,
        tokenStorage: TokenStorage,
        errorService: ErrorService,
        serviceType: MusicServiceType
    ) {
        self.webAuthHandler = webAuthHandler
        self.tokenStorage = tokenStorage
        self.errorService = errorService
        self.serviceType = serviceType
        
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        updateConnectionState()
    }
    
    // MARK: - –ü—É–±–ª—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å (MusicServiceProtocol)
    
    func authenticate() {
        isLoading = true
        errorMessage = nil
        
        print("üéµ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó \(serviceType.rawValue)")
        authenticateViaWeb()
    }
    
    func handleAuthCallback(url: URL) {
        print("üéµ –û–±—Ä–æ–±–∫–∞ callback \(serviceType.rawValue): \(url)")
        
        webAuthHandler.handleCallback(url: url) { [weak self] result in
            DispatchQueue.main.async {
                switch result {
                case .success(let token):
                    self?.handleAuthSuccess(accessToken: token)
                case .failure(let error):
                    self?.handleError(error.localizedDescription)
                }
                self?.isLoading = false
            }
        }
    }
    
    func isAuthenticated() -> Bool {
        return tokenStorage.getAccessToken() != nil
    }
    
    func disconnect() {
        tokenStorage.clearTokens()
        
        DispatchQueue.main.async {
            self.isConnected = false
            self.isLoading = false
        }
        
        print("üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ \(serviceType.rawValue)")
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        NotificationCenter.default.post(
            name: serviceType.legacyDisconnectNotificationName,
            object: nil
        )
    }
    
    func getAccessToken() -> String? {
        return tokenStorage.getAccessToken()
    }
    
    // MARK: - –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ª–æ–≥—ñ–∫–∞
    
    internal func authenticateViaWeb() {
        webAuthHandler.authenticateViaWeb() { [weak self] result in
            DispatchQueue.main.async {
                self?.isLoading = false
                
                switch result {
                case .success(let accessToken):
                    self?.handleAuthSuccess(accessToken: accessToken)
                case .failure(let error):
                    self?.handleError(error.localizedDescription)
                }
            }
        }
    }
    
    internal func handleAuthSuccess(accessToken: String) {
        tokenStorage.saveAccessToken(accessToken)
        print("‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è \(serviceType.rawValue)! –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ")
        
        self.isConnected = true
        self.isLoading = false
        
        errorMessage = nil
        errorService.clearCurrentError()
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        NotificationCenter.default.post(
            name: serviceType.legacyNotificationName,
            object: accessToken
        )
    }
    
    internal func handleError(_ message: String) {
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ \(serviceType.rawValue): \(message)")
        errorMessage = message
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –º–µ—Ç–æ–¥–∏ ErrorService
        switch serviceType {
        case .spotify:
            errorService.reportSpotifyError(message)
        case .youtubeMusic:
            errorService.reportYouTubeMusicError(message)
        case .appleMusic:
            errorService.report(.unknown(description: message))
        }
        
        DispatchQueue.main.async {
            self.isLoading = false
        }
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        NotificationCenter.default.post(
            name: serviceType.legacyErrorNotificationName,
            object: message
        )
    }
    
    internal func updateConnectionState() {
        self.isConnected = isAuthenticated()
    }
}
