// AppleMusicServiceClient.swift
import Foundation
import MusicKit
import MediaPlayer

final class AppleMusicServiceClient: BaseMusicServiceClient<
    AppleMusicConstants,
    AppleMusicAuthHandler,
    AppleMusicTokenStorage
> {
    
    // –î–æ–¥–∞—î–º–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    private var hasExplicitlyConnected: Bool {
        get {
            UserDefaults.standard.bool(forKey: "AppleMusicExplicitlyConnected")
        }
        set {
            UserDefaults.standard.set(newValue, forKey: "AppleMusicExplicitlyConnected")
        }
    }
    
    // MARK: - –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è Apple Music
    
    func requestMediaLibraryAuthorization() async -> Bool {
        let status = await MPMediaLibrary.requestAuthorization()
        return status == .authorized
    }
    
    func checkMusicSubscription() async -> Bool {
        do {
            let subscription = try await MusicSubscription.current
            return subscription.canPlayCatalogContent
        } catch {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: \(error)")
            return false
        }
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    func getUserPlaylists() async throws -> MusicItemCollection<Playlist> {
        guard isAuthenticated() else {
            throw MusicServiceAuthError.noAccessToken
        }
        
        let request = MusicLibraryRequest<Playlist>()
        let response = try await request.response()
        return response.items
    }
    
    // –ü–æ—à—É–∫ –º—É–∑–∏–∫–∏
    func searchCatalog(_ query: String) async throws -> MusicCatalogSearchResponse {
        guard isAuthenticated() else {
            throw MusicServiceAuthError.noAccessToken
        }
        
        var request = MusicCatalogSearchRequest(term: query, types: [Song.self, Album.self, Playlist.self])
        request.limit = 25
        return try await request.response()
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤
    func getRecommendedPlaylists() async throws -> MusicItemCollection<Playlist> {
        guard isAuthenticated() else {
            throw MusicServiceAuthError.noAccessToken
        }
        
        let request = MusicPersonalRecommendationsRequest()
        let response = try await request.response()
        return response.recommendations.first?.playlists ?? MusicItemCollection<Playlist>()
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ—â–æ–¥–∞–≤–Ω–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–∏—Ö
    func getRecentlyPlayed() async throws -> MusicItemCollection<Song> {
        guard isAuthenticated() else {
            throw MusicServiceAuthError.noAccessToken
        }
        
        let request = MusicLibraryRequest<Song>()
        let response = try await request.response()
        return response.items
    }
    
    // MARK: - –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É
    
    override func authenticate() {
        isLoading = true
        errorMessage = nil
        
        print("üéµ –ó–∞–ø—É—Å–∫ –Ω–∞—Ç–∏–≤–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Apple Music...")
        
        Task { @MainActor in
            await performNativeAuthentication()
        }
    }
    
    override func handleAuthCallback(url: URL) {
        // Apple Music –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î URL callback
        print("‚ÑπÔ∏è Apple Music uses native authorization, not URL callbacks")
    }
    
    override func isAuthenticated() -> Bool {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫ —Å–∏—Å—Ç–µ–º–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é, —Ç–∞–∫ —ñ —è–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        return MusicAuthorization.currentStatus == .authorized && hasExplicitlyConnected
    }
    
    override func getAccessToken() -> String? {
        return "apple_music_native_access"
    }
    
    override func disconnect() {
        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —è–≤–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        hasExplicitlyConnected = false
        tokenStorage.clearTokens()
        
        DispatchQueue.main.async {
            self.isConnected = false
            self.isLoading = false
        }
        
        print("üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ Apple Music")
        
        NotificationCenter.default.post(
            name: MusicServiceType.appleMusic.legacyDisconnectNotificationName,
            object: nil
        )
    }
    
    // MARK: - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏
    
    convenience init(errorService: ErrorService = .shared) {
        let authHandler = AppleMusicAuthHandler()
        let tokenStorage = AppleMusicTokenStorage()
        
        self.init(
            webAuthHandler: authHandler,
            tokenStorage: tokenStorage,
            errorService: errorService,
            serviceType: .appleMusic
        )
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        updateConnectionState()
    }
    
    // MARK: - Private Methods
    
    @MainActor
    private func performNativeAuthentication() async {
        do {
            // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ MusicKit
            print("1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è MusicKit...")
            let musicStatus = await MusicAuthorization.request()
            
            switch musicStatus {
            case .authorized:
                print("‚úÖ MusicKit –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ!")
                
                // 2. –ó–∞–ø–∏—Ç –¥–æ–∑–≤–æ–ª—É –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –º–µ–¥—ñ–∞—Ç–µ–∫–∏
                print("2. –ó–∞–ø–∏—Ç –¥–æ—Å—Ç—É–ø—É –¥–æ –º–µ–¥—ñ–∞—Ç–µ–∫–∏...")
                let mediaAuthorized = await requestMediaLibraryAuthorization()
                
                // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
                print("3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ Apple Music...")
                let hasSubscription = await checkMusicSubscription()
                
                if hasSubscription {
                    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —è–≤–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                    self.hasExplicitlyConnected = true
                    handleAuthSuccess(accessToken: "apple_music_native_access")
                    print("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ Apple Music")
                } else {
                    // –í—Å–µ –æ–¥–Ω–æ –≤–≤–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö–æ–º, –∞–ª–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                    self.hasExplicitlyConnected = true
                    handleAuthSuccess(accessToken: "apple_music_native_access")
                    print("‚ö†Ô∏è –ü—ñ–¥–ø–∏—Å–∫–∞ Apple Music –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∞–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞")
                    await MainActor.run {
                        self.errorMessage = "–ü—ñ–¥–ø–∏—Å–∫–∞ Apple Music –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—ñ."
                    }
                }
                
                if !mediaAuthorized {
                    print("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –¥–æ –º–µ–¥—ñ–∞—Ç–µ–∫–∏ –Ω–µ –Ω–∞–¥–∞–Ω–æ")
                }
                
            case .denied:
                throw MusicServiceAuthError.accessDenied
            case .notDetermined:
                throw MusicServiceAuthError.notDetermined
            case .restricted:
                throw MusicServiceAuthError.restricted
            @unknown default:
                throw MusicServiceAuthError.serviceError("–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
            }
            
        } catch {
            handleError(error.localizedDescription)
        }
    }
    
    // –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    internal override func handleAuthSuccess(accessToken: String) {
        tokenStorage.saveAccessToken(accessToken)
        print("‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è Apple Music!")
        
        self.isConnected = true
        self.isLoading = false
        
        errorMessage = nil
        errorService.clearCurrentError()
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        NotificationCenter.default.post(
            name: serviceType.legacyNotificationName,
            object: accessToken
        )
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    internal override func updateConnectionState() {
        self.isConnected = isAuthenticated()
    }
}
